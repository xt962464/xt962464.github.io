<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微服务 spring gateway+nacos +security+JWT 认证授权</title>
      <link href="xt/b98e.html"/>
      <url>xt/b98e.html</url>
      
        <content type="html"><![CDATA[<p>@[TOC]<br><strong>前言:</strong><br>    版本信息:</p><ul><li>springboot:  <strong>2.3.0.RELEASE</strong></li><li>Spring Cloud Hoxton:  <strong>Hoxton.SR3</strong></li><li>Spring Cloud Alibaba:  <strong>2.2.1.RELEASE</strong></li></ul><h1 id="一-涉及到的微服务模块以及技术有"><a href="#一-涉及到的微服务模块以及技术有" class="headerlink" title="一.涉及到的微服务模块以及技术有:"></a>一.涉及到的微服务模块以及技术有:</h1><h2 id="1-微服务"><a href="#1-微服务" class="headerlink" title="1.微服务"></a>1.微服务</h2><ol><li>管理员资源服务</li><li>app用户资源服务</li><li>网关</li><li>认证中心</li><li>公共资源服务<h2 id="2-技术或组件"><a href="#2-技术或组件" class="headerlink" title="2.技术或组件"></a>2.技术或组件</h2></li><li>spring gateway—-网关</li><li>alibaba nacos —–注册中心</li><li>spring security ——认证授权</li><li>jwt  ———————生成token</li><li>mybatis plus ———持久层框架</li><li>my sql  —————–数据存储</li><li>Feign —————–服务间的远程调用</li></ol><h1 id="二-实现的功能"><a href="#二-实现的功能" class="headerlink" title="二.实现的功能:"></a>二.实现的功能:</h1><h2 id="1-网关"><a href="#1-网关" class="headerlink" title="1.网关"></a>1.网关</h2><blockquote><p> 统一系统接口入口,在<strong>网关</strong>进行<strong>鉴权</strong>操作,<br> (取出token中的权限信息进行鉴权)<br> <strong>默认负载均衡策略为:轮询策略</strong></p></blockquote><h2 id="2-接口设计"><a href="#2-接口设计" class="headerlink" title="2.接口设计"></a>2.接口设计</h2><h3 id="2-1-三组资源"><a href="#2-1-三组资源" class="headerlink" title="2.1 三组资源:"></a>2.1 三组资源:</h3><ol><li>admin资源,</li><li>用户资源,</li><li>公共资源</li></ol><h4 id="1-admin资源"><a href="#1-admin资源" class="headerlink" title="(1).admin资源:"></a>(1).admin资源:</h4><p>自然是只有admin角色才可访问</p><h4 id="2-用户资源"><a href="#2-用户资源" class="headerlink" title="(2).用户资源:"></a>(2).用户资源:</h4><p><strong>分别有</strong></p><ol><li>用户访问资源</li><li>admin访问资源(需要有admin角色可访问)</li></ol><h4 id="3-公共资源"><a href="#3-公共资源" class="headerlink" title="(3).公共资源"></a>(3).公共资源</h4><p>略…..</p><p><strong>3.认证中心</strong></p><blockquote><p>进行登录用户的认证授权,返回用户名和token的json数据,<br>权限信息放在token中</p></blockquote><p><strong>4.其他服务</strong></p><blockquote><p>顾名思义</p></blockquote><p><strong>5.接口url设计</strong><br><strong>注:<br>app接口需要拥有user角色的用户才可访问<br>admin接口需要拥有admin角色才可访问</strong></p><blockquote><p><strong>app接口:</strong>      <strong>/前缀/api-服务名/v1/api/**</strong><br><strong>admin接口:</strong>  <strong>/前缀/api-服务名/v1/admin/**</strong></p></blockquote><p><strong>5.项目服务</strong><br><img src="https://img-blog.csdnimg.cn/20201128204100807.png" alt="项目结构"></p><h1 id="三-数据表设计"><a href="#三-数据表设计" class="headerlink" title="三.数据表设计"></a>三.数据表设计</h1><p><img src="https://img-blog.csdnimg.cn/2020112821375196.png" alt="数据表设计"></p><h1 id="四-代码实现"><a href="#四-代码实现" class="headerlink" title="四:代码实现"></a>四:代码实现</h1><h2 id="1-项目父工程"><a href="#1-项目父工程" class="headerlink" title="1.项目父工程"></a>1.项目父工程</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="(1).依赖"></a>(1).依赖</h3><pre><code class="xml">    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;packaging&gt;pom&lt;/packaging&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;!-- Spring Cloud Hoxton --&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                &lt;version&gt;Hoxton.SR3&lt;/version&gt;                &lt;type&gt;pom&lt;/type&gt;                &lt;scope&gt;import&lt;/scope&gt;            &lt;/dependency&gt;            &lt;!-- Spring Cloud Alibaba --&gt;            &lt;dependency&gt;                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;                &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;                &lt;type&gt;pom&lt;/type&gt;                &lt;scope&gt;import&lt;/scope&gt;            &lt;/dependency&gt;        &lt;/dependencies&gt;    &lt;/dependencyManagement&gt;</code></pre><h2 id="2-网关"><a href="#2-网关" class="headerlink" title="2.网关"></a>2.网关</h2><p><img src="https://img-blog.csdnimg.cn/20201128205041128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="网关"></p><h3 id="1-依赖-1"><a href="#1-依赖-1" class="headerlink" title="(1).依赖"></a>(1).依赖</h3><pre><code class="xml">    &lt;dependencies&gt;        &lt;!--项目公共模块--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.qiongqi.taoyiquan&lt;/groupId&gt;            &lt;artifactId&gt;taoyiquan-common&lt;/artifactId&gt;            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;                    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;                &lt;/exclusion&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;                    &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;                &lt;/exclusion&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;javax.validation&lt;/groupId&gt;                    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;            &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;            &lt;version&gt;1.2.62&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><h3 id="2-yml配置"><a href="#2-yml配置" class="headerlink" title="(2).yml配置"></a>(2).yml配置</h3><pre><code class="yaml">server:  port: 8849spring:  application:    name: taoyiquan-gateway  cloud:    nacos:      discovery:        server-addr: localhost:8848    gateway:      routes:        - id: taoyiquan-admin          uri: lb://taoyiquan-admin # lb: 使用负载均衡策略  默认应该是轮询策略          predicates:            - Path=/admin/**          filters:            - StripPrefix=1        - id: taoyiquan-user          uri: lb://taoyiquan-user          predicates:            - Path=/user/**          filters:            - StripPrefix=1        - id: taoyiquan-auth          uri: lb://taoyiquan-auth          predicates:            - Path=/auth/**          filters:            - StripPrefix=1        - id: taoyiquan-taobao          uri: lb://taoyiquan-taobao          predicates:            - Path=/taobao/**          filters:            - StripPrefix=1</code></pre><h3 id="3-security配置"><a href="#3-security配置" class="headerlink" title="(3).security配置"></a>(3).security配置</h3><pre><code class="java">/** * @description: security配置 * @author: ※狗尾巴草 * @date: 2020-11-26 12:01 **/@EnableWebFluxSecuritypublic class SecurityConfig &#123;    @Autowired    private CustomizeAuthenticationEntryPoint authenticationEntryPoint;    //security的鉴权排除的url列表    private static final String[] excludedAuthPages = &#123;            &quot;/auth/api-auth/v1/login&quot;,//登录    &#125;;    @Bean    SecurityWebFilterChain securityFilterChain(ServerHttpSecurity http)&#123;        http                .authorizeExchange()                // 需要权限访问de接口                .pathMatchers(&quot;/admin/**&quot;,&quot;/user/api-user/*/admin/**&quot;).access(new XTReactiveAuthorizationManager(&quot;admin&quot;))                .pathMatchers(&quot;/user/api-user/*/api/**&quot;).access(new XTReactiveAuthorizationManager(&quot;admin&quot;,&quot;user&quot;))                //无需权限访问//                .pathMatchers(excludedAuthPages).permitAll()  //无需进行权限过滤的请求路径//                .pathMatchers(HttpMethod.OPTIONS).permitAll() //option 请求默认放行                .anyExchange().permitAll()//无需权限访问                .and()                .httpBasic()//                .authenticationEntryPoint()                .and()                .exceptionHandling()                .authenticationEntryPoint(authenticationEntryPoint)// 匿名访问                .and() .csrf().disable()//必须支持跨域                .logout().disable()        ;        SecurityWebFilterChain chain = http.build();        Iterator&lt;WebFilter&gt; weIterable = chain.getWebFilters().toIterable().iterator();        while(weIterable.hasNext()) &#123;            WebFilter f = weIterable.next();            if(f instanceof AuthenticationWebFilter) &#123;                AuthenticationWebFilter webFilter = (AuthenticationWebFilter) f;                //将自定义的AuthenticationConverter添加到过滤器中                webFilter.setServerAuthenticationConverter(new XTAuthenticationConverter());            &#125;        &#125;        return chain;    &#125;    @Bean    public ReactiveAuthenticationManager reactiveAuthenticationManager() &#123;        return new ReactiveAuthenticationManagerAdapter((authentication)-&gt;&#123;            if(authentication instanceof XTAccountAuthentication) &#123;                XTAccountAuthentication gmAccountAuthentication = (XTAccountAuthentication) authentication;                if(gmAccountAuthentication.getPrincipal() != null) &#123;                    authentication.setAuthenticated(true);                    return authentication;                &#125; else &#123;                    return authentication;                &#125;            &#125; else &#123;                return authentication;            &#125;        &#125;);    &#125;&#125;</code></pre><h3 id="4-取出token中的权限信息"><a href="#4-取出token中的权限信息" class="headerlink" title="(4).取出token中的权限信息"></a>(4).取出token中的权限信息</h3><pre><code class="java">/** * @description: 取出token中的权限信息 * @author: ※狗尾巴草 * @date: 2020-11-27 23:12 **/public class XTAuthenticationConverter extends ServerFormLoginAuthenticationConverter &#123;    private static Logger logger = LoggerFactory.getLogger(XTAuthenticationConverter.class);    @Override    public Mono&lt;Authentication&gt; convert(ServerWebExchange exchange) &#123;        System.out.println(&quot;从token中获取登陆用户信息&quot;);        //从token中获取登陆用户信息        List&lt;String&gt; tokenList = exchange.getRequest().getHeaders().get(&quot;token&quot;);        if(tokenList==null) &#123;            logger.error(&quot;用户认证信息为空,返回获取认证信息失败&quot;);            return Mono.empty();        &#125; else &#123;            String token = tokenList.get(0);            List&lt;SimpleGrantedAuthority&gt; simpleGrantedAuthorities = new ArrayList&lt;&gt;();            //获取权限信息            if(!JwtTokenUtils.checkJWT(token))&#123;                logger.error(&quot;用户认证信息为空,返回获取认证信息失败&quot;);                return Mono.empty();            &#125;            List&lt;String&gt; roles = JwtTokenUtils.getUserRole(token);            if(roles==null)&#123;                System.out.println(&quot;token过期&quot;);                return Mono.empty();            &#125;            roles.forEach(role -&gt;&#123;                SimpleGrantedAuthority auth = new SimpleGrantedAuthority(role);                simpleGrantedAuthorities.add(auth);            &#125;);            //添加用户信息到spring security之中。            XTAccountAuthentication  xinyueAccountAuthentication = new XTAccountAuthentication(null, token, simpleGrantedAuthorities);            return Mono.just(xinyueAccountAuthentication);        &#125;    &#125;&#125;</code></pre><p><strong>XTAccountAuthentication类</strong></p><pre><code class="java">/** * @description: 说明 * @author: ※狗尾巴草 * @date: 2020-11-27 23:13 **/public class XTAccountAuthentication extends AbstractAuthenticationToken &#123;    private static final long serialVersionUID = 1L;    private Object credentials;    private String principal;    public XTAccountAuthentication(Object credentials,String principal,Collection&lt;? extends GrantedAuthority&gt; authorities) &#123;        super(authorities);        this.credentials = credentials;        this.principal = principal;    &#125;    @Override    public Object getCredentials() &#123;        return this.credentials;    &#125;    @Override    public String getPrincipal() &#123;        return this.principal;    &#125;&#125;</code></pre><h3 id="5-鉴权"><a href="#5-鉴权" class="headerlink" title="(5).鉴权"></a>(5).鉴权</h3><pre><code class="java">/** * @description: 鉴权 * @author: ※狗尾巴草 * @date: 2020-11-27 21:46 **/public class XTReactiveAuthorizationManager implements ReactiveAuthorizationManager&lt;AuthorizationContext&gt;  &#123;    private List&lt;String&gt; authorities = new ArrayList&lt;&gt;();    public XTReactiveAuthorizationManager(String authority, String... authorities ) &#123;        this.authorities.add(&quot;ROLE_&quot; + authority);        if(authorities != null) &#123;            for(String auth : authorities) &#123;                this.authorities.add(&quot;ROLE_&quot; + auth);            &#125;        &#125;    &#125;    @Override    public Mono&lt;AuthorizationDecision&gt; check(Mono&lt;Authentication&gt; authentication, AuthorizationContext authorizationContext) &#123;        return authentication                .filter(a -&gt; a.isAuthenticated())                .flatMapIterable(a -&gt; a.getAuthorities())                .map(g -&gt; g.getAuthority())                .any(c -&gt; &#123;                    //检测权限是否匹配                    System.out.println(&quot;角色: &quot; + c);                    if (authorities.contains(c)) &#123;                        return true;                    &#125;                    ResponseData&lt;Object&gt; data = new ResponseData&lt;&gt;().fail(ResultCode.NO_PERMISSION.getCode(),ResultCode.NO_PERMISSION.getMessage());                    //权限不足,抛出异常                    throw new AccessDeniedException(JSONObject.toJSONString(data));                &#125;)                .map(hasAuthority -&gt; new AuthorizationDecision(hasAuthority))                .defaultIfEmpty(new AuthorizationDecision(false));    &#125;&#125;</code></pre><h3 id="6-统一异常捕获"><a href="#6-统一异常捕获" class="headerlink" title="(6).统一异常捕获"></a>(6).统一异常捕获</h3><pre><code class="java">/** * @description: 网关异常通用处理器，只作用在webflux 环境下 * @author: ※狗尾巴草 * @date: 2020-11-28 16:28 **/@Order(-1)@RequiredArgsConstructor@Componentpublic class GlobalExceptionConfiguration implements ErrorWebExceptionHandler &#123;    private final ObjectMapper objectMapper;    @Override    public Mono&lt;Void&gt; handle(ServerWebExchange exchange, Throwable ex) &#123;        System.out.println(&quot;发生异常&quot;);        ServerHttpResponse response = exchange.getResponse();        if (response.isCommitted()) &#123;            return Mono.error(ex);        &#125;        //设置响应头的数据类型,applicaion/json模式,返回json数据        response.getHeaders().setContentType(MediaType.APPLICATION_JSON);        if (ex instanceof ResponseStatusException) &#123;            response.setStatusCode(((ResponseStatusException) ex).getStatus());        &#125;        return response                .writeWith(Mono.fromSupplier(() -&gt; &#123;                    DataBufferFactory bufferFactory = response.bufferFactory();                    try &#123;                        return bufferFactory.wrap(objectMapper.writeValueAsBytes(ex.getMessage()));                    &#125; catch (JsonProcessingException e) &#123;//                        log.warn(&quot;Error writing response&quot;, ex);                        return bufferFactory.wrap(new byte[0]);                    &#125;                &#125;));    &#125;&#125;</code></pre><h3 id="7-无权限处理"><a href="#7-无权限处理" class="headerlink" title="(7).无权限处理"></a>(7).无权限处理</h3><pre><code class="java">/** * @description: 匿名用户访问无权限资源时的异常 * @author: ※狗尾巴草 * @date: 2020-11-13 14:15 **/@Componentpublic class CustomizeAuthenticationEntryPoint implements ServerAuthenticationEntryPoint &#123;    @Override    public Mono&lt;Void&gt; commence(ServerWebExchange exchange, AuthenticationException e) &#123;        System.out.println(&quot;无权限访问&quot;);        ResponseData&lt;Object&gt; data = new ResponseData&lt;&gt;().fail(ResultCode.NO_PERMISSION.getCode(),ResultCode.NO_PERMISSION.getMessage());//        抛出异常        return Mono.error(new  AccessDeniedException(JSONObject.toJSONString(data)));    &#125;&#125;</code></pre><h2 id="3-认证中心"><a href="#3-认证中心" class="headerlink" title="3.认证中心"></a>3.认证中心</h2><p><strong>注:<br>统一认证中心,统一登录入口,同一套规则,但是管理员数据和普通用户数据还是分表存储,暂时没找到好的办法解决,这里使用简单的方法区别管理员登录和普通用户登录,增加前缀,<br>例如<br>管理员登录,admin_111<br>用户登录: user_111</strong></p><p><img src="https://img-blog.csdnimg.cn/20201128210731170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="认证中心"></p><h3 id="1-依赖-2"><a href="#1-依赖-2" class="headerlink" title="(1).依赖"></a>(1).依赖</h3><pre><code class="xml">    &lt;dependencies&gt;        &lt;!--公共模块--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.qiongqi.taoyiquan&lt;/groupId&gt;            &lt;artifactId&gt;taoyiquan-common&lt;/artifactId&gt;            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;                    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;                &lt;/exclusion&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;                    &lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt;                &lt;/exclusion&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;javax.validation&lt;/groupId&gt;                    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;!--springcloud整合的openFeign--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;            &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;            &lt;version&gt;4.0.1&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><h3 id="2-yml配置-1"><a href="#2-yml配置-1" class="headerlink" title="(2).yml配置"></a>(2).yml配置</h3><pre><code class="yaml">server:  port: 8850  servlet:    context-path: /api-authspring:  application:    name: taoyiquan-auth  cloud:    nacos:      discovery:        server-addr: localhost:8848</code></pre><h3 id="3-Security配置"><a href="#3-Security配置" class="headerlink" title="(3).Security配置"></a>(3).Security配置</h3><pre><code class="java">/** * @description: Security配置 * @author: ※狗尾巴草 * @date: 2020-11-12 12:25 **/@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;    @Autowired    private CustomizeAuthenticationEntryPoint authenticationEntryPoint;    @Autowired    private CustomizeAuthenticationSuccessHandler successHandler;    @Autowired    private CustomizeAuthenticationFailureHandler failureHandler;    @Autowired    private CustomizeLogoutSuccessHandler logoutSuccessHandler;    @Bean    public BCryptPasswordEncoder passwordEncoder() &#123;        // 设置默认的加密方式（强hash方式加密）        return new BCryptPasswordEncoder();    &#125;    @Bean    public UserDetailsService userDetailsService() &#123;        //获取用户账号密码及权限信息        return new UserDetailsServiceImpl();    &#125;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;        //配置认证方式        auth.userDetailsService(userDetailsService());    &#125;//    @Override//    public void configure(WebSecurity web) &#123;//        //对于在header里面增加token等类似情况，放行所有OPTIONS请求。//        web.ignoring().antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;);//    &#125;    @Override    protected void configure(HttpSecurity http) throws Exception &#123;        //http相关的配置，包括登入登出、异常处理、会话管理等        http        .authorizeRequests()//                .antMatchers(&quot;/user/**&quot;).hasAuthority(&quot;query_user&quot;)//                基于角色控制//                .antMatchers(&quot;/admin/**&quot;).hasAnyRole(&quot;admin&quot;)//                .antMatchers(&quot;/user/**&quot;).hasAnyRole(&quot;user&quot;)        //登入        .and()                .formLogin()                .loginPage(&quot;/v1/login&quot;)                .permitAll()//允许所有用户                .successHandler(successHandler)//登录成功处理逻辑                .failureHandler(failureHandler)//登录失败处理逻辑//        //登出        .and().logout()                .permitAll()//允许所有用户                .logoutSuccessHandler(logoutSuccessHandler)//登出成功处理逻辑                .deleteCookies(&quot;JSESSIONID&quot;)//登出之后删除cookie                //异常处理(权限拒绝、登录失效等)        .and().exceptionHandling().                authenticationEntryPoint(authenticationEntryPoint)//匿名用户访问无权限资源时的异常处理//                .accessDeniedHandler(accessDeniedHandler)//异常捕获//                .authenticationEntryPoint(new JWTAuthenticationEntryPoint())//        限制同一账号只能一个用户使用  会话管理        .and().sessionManagement()//                .maximumSessions(1)//同一账号同时登录最大用户数//                .expiredSessionStrategy(sessionInformationExpiredStrategy)//会话信息过期策略会话信息过期策略(账号被挤下线)        ;        http.csrf().disable().cors()                .and()//                .addFilter(new JWTAuthenticationFilter(authenticationManager()))//                .addFilter(new JWTAuthorizationFilter(authenticationManager()))                // 不需要session                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)        ;//        http.addFilterBefore(securityInterceptor, FilterSecurityInterceptor.class);//增加到默认拦截链中    &#125;&#125;</code></pre><h3 id="4-登录认证授权"><a href="#4-登录认证授权" class="headerlink" title="(4).登录认证授权"></a>(4).登录认证授权</h3><pre><code class="java">/** * @description: 登录认证授权 * @author: ※狗尾巴草 * @date: 2020-11-13 10:00 **/public class UserDetailsServiceImpl implements UserDetailsService &#123;    @Autowired    private adminFeignClient adminFeignClient;    @Autowired    private roleFeignClient roleFeignClient;    @Autowired    private userFeignClient userFeignClient;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;        //需要构造出 org.springframework.security.core.userdetails.User 对象并返回        //校验验证码等操作....        //        if(!StringUtils.isNotBlank(username))&#123;            throw new RuntimeException(&quot;用户不能为空&quot;);        &#125;        ResponseData Account =null;                String[] name_list = username.split(&quot;_&quot;);        if(&quot;user&quot;.equals(name_list[0]))&#123;//            普通用户登录            Account = userFeignClient.getByAccount(name_list[1]);        &#125;else if(&quot;admin&quot;.equals(name_list[0]))&#123;//            管理员登录            Account = adminFeignClient.getByAccount(name_list[1]);        &#125;        LinkedHashMap data = (LinkedHashMap) Account.getData();        if(data==null)&#123;            throw new RuntimeException(&quot;用户不存在&quot;);        &#125;        List&lt;GrantedAuthority&gt; grantedAuthorities  = new ArrayList&lt;&gt;();        //获取该用户所拥有的角色        ResponseData roleData = roleFeignClient.getByUserId(data.get(&quot;id&quot;).toString());        JSONObject roleJson =(JSONObject) JSONObject.toJSON(roleData);        //角色和权限共用GrantedAuthority接口，唯一的不同角色就是多了个前缀&quot;ROLE_&quot;//        // 声明用户角色        roleJson.getJSONArray(&quot;data&quot;).forEach(role -&gt;&#123;            //基于角色控制            grantedAuthorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot;+((JSONObject)role).get(&quot;roleCode&quot;)));        &#125;);        User user = new User(data.get(&quot;account&quot;).toString(), data.get(&quot;password&quot;).toString(), true, true, true, true, grantedAuthorities);        return user;    &#125;&#125;</code></pre><h3 id="5-登录成功处理器"><a href="#5-登录成功处理器" class="headerlink" title="(5).登录成功处理器"></a>(5).登录成功处理器</h3><pre><code class="java">/** * @description: 登录成功处理器 * @author: ※狗尾巴草 * @date: 2020-11-13 14:19 **/@Componentpublic class CustomizeAuthenticationSuccessHandler implements AuthenticationSuccessHandler &#123;    @Autowired    private adminFeignClient adminFeignClient;    @Override    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &#123;        //更新用户表上次登录时间、更新人、更新时间等字段        User userDetails = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        adminFeignClient.updateLoginTime(userDetails.getUsername(),new Date());//        SysUserEntity sysUser = sysUserService.selectByName(userDetails.getUsername());//        sysUser.setLast_login_time(new Date());//        sysUser.setUpdate_time(new Date());//        sysUser.setUpdate_user(sysUser.getId());//        sysUserService.updateById(sysUser);        //此处还可以进行一些处理，比如登录成功之后可能需要返回给前台当前用户有哪些菜单权限，        //进而前台动态的控制菜单的显示等，具体根据自己的业务需求进行扩展        //  获取用户权限        Collection&lt;? extends GrantedAuthority&gt; authorities = userDetails.getAuthorities();        List&lt;String&gt; list = new ArrayList&lt;&gt;();        for (GrantedAuthority authority : authorities)&#123;            list.add(authority.getAuthority());        &#125;        //将权限放入token中        String token = JwtTokenUtils.createToken(userDetails.getUsername(), list);        JSONObject object = new JSONObject();        object.put(&quot;token&quot;,token);        object.put(&quot;account&quot;,userDetails.getUsername());        //处理编码方式，防止中文乱码的情况        httpServletResponse.setContentType(&quot;text/json;charset=utf-8&quot;);        //塞到HttpServletResponse中返回给前台        httpServletResponse.getWriter().write(JSON.toJSONString(object));    &#125;&#125;</code></pre><h3 id="6-登录失败"><a href="#6-登录失败" class="headerlink" title="(6).登录失败"></a>(6).登录失败</h3><pre><code class="java">/** * @description: 登录失败处理逻辑 * @author: ※狗尾巴草 * @date: 2020-11-13 14:22 **/@Componentpublic class CustomizeAuthenticationFailureHandler implements AuthenticationFailureHandler &#123;    @Override    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;        //返回json数据        ResponseData&lt;Object&gt; data = null;        if (e instanceof AccountExpiredException) &#123;            //账号过期            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_ACCOUNT_EXPIRED.getCode(),ResultCode.USER_ACCOUNT_EXPIRED.getMessage());        &#125; else if (e instanceof BadCredentialsException) &#123;            //密码错误            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_CREDENTIALS_ERROR.getCode(),ResultCode.USER_CREDENTIALS_ERROR.getMessage());        &#125; else if (e instanceof CredentialsExpiredException) &#123;            //密码过期            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_CREDENTIALS_EXPIRED.getCode(),ResultCode.USER_CREDENTIALS_EXPIRED.getMessage());        &#125; else if (e instanceof DisabledException) &#123;            //账号不可用            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_ACCOUNT_DISABLE.getCode(),ResultCode.USER_ACCOUNT_DISABLE.getMessage());        &#125; else if (e instanceof LockedException) &#123;            //账号锁定            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_ACCOUNT_LOCKED.getCode(),ResultCode.USER_ACCOUNT_LOCKED.getMessage());        &#125; else if (e instanceof InternalAuthenticationServiceException) &#123;            //用户不存在            data = new ResponseData&lt;&gt;().fail(ResultCode.USER_ACCOUNT_NOT_EXIST.getCode(),ResultCode.USER_ACCOUNT_NOT_EXIST.getMessage());        &#125;else&#123;            //其他错误            data = new ResponseData&lt;&gt;().fail(ResultCode.COMMON_FAIL.getCode(),ResultCode.COMMON_FAIL.getMessage());        &#125;        //处理编码方式，防止中文乱码的情况        httpServletResponse.setContentType(&quot;text/json;charset=utf-8&quot;);        //塞到HttpServletResponse中返回给前台        httpServletResponse.getWriter().write(JSON.toJSONString(data));    &#125;&#125;</code></pre><h3 id="7-微服务调用"><a href="#7-微服务调用" class="headerlink" title="7.微服务调用"></a>7.微服务调用</h3><blockquote><p>这里使用<strong>Feign</strong>做服务调用,</p></blockquote><p>1.admin服务调用</p><pre><code class="java">/** * @description: admin服务调用 *  * 声明需要调用的微服务名称 *  *  @FeignClient *  *      * name : 服务提供者的名称 * @author: ※狗尾巴草 * @date: 2020-11-27 11:20 **/@FeignClient(name=&quot;taoyiquan-admin&quot;,contextId = &quot;admin&quot;)public interface adminFeignClient &#123;    @GetMapping(&quot;/api-admin/v1/admin/entity/getByAccount&quot;)    ResponseData getByAccount(@RequestParam(&quot;account&quot;) String account);    @GetMapping(&quot;/api-admin/v1/admin/entity/updateLoginTime&quot;)    ResponseData updateLoginTime(@RequestParam(&quot;account&quot;) String account, @RequestParam(&quot;loginTime&quot;) Date loginTime);&#125;</code></pre><p>2.其他服务调用参考源码,</p><h2 id="管理员服务"><a href="#管理员服务" class="headerlink" title="管理员服务"></a>管理员服务</h2><p><img src="https://img-blog.csdnimg.cn/2020112821290815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="管理员"><br><strong>注:管理员服务,用户服务等无特殊逻辑实现,跟平常些项目一样增删改查操作</strong></p><p>(省略一堆废话……..)</p><h1 id="五-功能测试"><a href="#五-功能测试" class="headerlink" title="五.功能测试"></a>五.功能测试</h1><h2 id="1-普通用户登录"><a href="#1-普通用户登录" class="headerlink" title="1.普通用户登录"></a>1.普通用户登录</h2><blockquote><p>接口; <a href="http://localhost:8849/auth/api-auth/v1/login">http://localhost:8849/auth/api-auth/v1/login</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128214328810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="普通用户登录"></p><h3 id="1-访问接口"><a href="#1-访问接口" class="headerlink" title="(1).访问接口"></a>(1).访问接口</h3><h4 id="a-用户资源接口-app接口"><a href="#a-用户资源接口-app接口" class="headerlink" title="(a).用户资源接口-app接口"></a>(a).用户资源接口-app接口</h4><blockquote><p><a href="http://localhost:8849/user/api-user/v1/api/entity">http://localhost:8849/user/api-user/v1/api/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128214558150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="用户资源接口-api接口"></p><h4 id="b-用户资源接口-admin接口"><a href="#b-用户资源接口-admin接口" class="headerlink" title="(b).用户资源接口-admin接口"></a>(b).用户资源接口-admin接口</h4><blockquote><p><a href="http://localhost:8849/user/api-user/v1/admin/entity">http://localhost:8849/user/api-user/v1/admin/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128214724518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="用户资源接口-admin接口"></p><h4 id="c-管理员接口"><a href="#c-管理员接口" class="headerlink" title="( c) .管理员接口"></a>( c) .管理员接口</h4><blockquote><p><a href="http://localhost:8849/admin/api-admin/v1/admin/entity">http://localhost:8849/admin/api-admin/v1/admin/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128215004801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="管理员接口"></p><h4 id="d-公共资源接口"><a href="#d-公共资源接口" class="headerlink" title="(d).公共资源接口"></a>(d).公共资源接口</h4><blockquote><p><a href="http://localhost:8849/taobao/api-taobao/v1/info">http://localhost:8849/taobao/api-taobao/v1/info</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020112821510667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="公共资源接口"></p><h2 id="2-管理员登录"><a href="#2-管理员登录" class="headerlink" title="2.管理员登录"></a>2.管理员登录</h2><blockquote><p><a href="http://localhost:8849/auth/api-auth/v1/login?username=admin_111&amp;password=111">http://localhost:8849/auth/api-auth/v1/login?username=admin_111&amp;password=111</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128215247291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="管理员登录"></p><h3 id="1-访问接口-1"><a href="#1-访问接口-1" class="headerlink" title="1.访问接口"></a>1.访问接口</h3><h4 id="a-用户资源接口-app接口-1"><a href="#a-用户资源接口-app接口-1" class="headerlink" title="(a).用户资源接口-app接口"></a>(a).用户资源接口-app接口</h4><blockquote><p><a href="http://localhost:8849/user/api-user/v1/api/entity">http://localhost:8849/user/api-user/v1/api/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020112821563873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="用户资源接口-app接口"></p><h4 id="b-用户资源接口-admin接口-1"><a href="#b-用户资源接口-admin接口-1" class="headerlink" title="(b).用户资源接口-admin接口"></a>(b).用户资源接口-admin接口</h4><blockquote><p><a href="http://localhost:8849/user/api-user/v1/admin/entity">http://localhost:8849/user/api-user/v1/admin/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20201128215819641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="用户资源接口-admin接口"></p><h4 id="a-访问管理员接口"><a href="#a-访问管理员接口" class="headerlink" title="(a).访问管理员接口"></a>(a).访问管理员接口</h4><blockquote><p><a href="http://localhost:8849/admin/api-admin/v1/admin/entity">http://localhost:8849/admin/api-admin/v1/admin/entity</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020112821541996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNzU4NTM1,size_16,color_FFFFFF,t_70" alt="访问管理员接口"></p><h1 id="六-最后"><a href="#六-最后" class="headerlink" title="六:最后:"></a>六:最后:</h1><h2 id="想象中的功能设计"><a href="#想象中的功能设计" class="headerlink" title="想象中的功能设计:"></a>想象中的功能设计:</h2><p>本来想在gateway的全局过滤器中拦截指定接口,再其判断token的有效性,有效即可通过,去鉴权,无效就拦截</p><h2 id="现实中的功能实现-我所能实现的"><a href="#现实中的功能实现-我所能实现的" class="headerlink" title="现实中的功能实现(我所能实现的):"></a>现实中的功能实现(我所能实现的):</h2><p>添加完成security和全局过滤器后,发现奇怪的事情,就是security执行在先,过滤器执行再后,无论过滤器的Order设置多小(记得是Order越小,优先级越高,先执行),都是过滤器执行再后,无奈就将过滤器注释掉,</p><h1 id="七-项目地址"><a href="#七-项目地址" class="headerlink" title="七.项目地址"></a>七.项目地址</h1><p><a href="https://github.com/xt962464/taoyiquan-Server">传送门</a></p><p>大体功能写到这,细节未完善</p><p><strong>有哪位路过的大佬,还望不吝赐教</strong></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>title2</title>
      <link href="xt/d527.html"/>
      <url>xt/d527.html</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>fdfdfdfdfhghghghghghg</p><blockquote><p>hghghghghghghgh</p></blockquote><p><a href="https://www.baidu.com/">百度</a></p><p><a href="http://www.baidu.com/">www.baidu.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="xt/1023.html"/>
      <url>xt/1023.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试文章一级标题"><a href="#测试文章一级标题" class="headerlink" title="测试文章一级标题"></a>测试文章一级标题</h1><h2 id="444444"><a href="#444444" class="headerlink" title="444444"></a>444444</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="xt/3eeb.html"/>
      <url>xt/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
